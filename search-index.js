var searchIndex = JSON.parse('{\
"config_utils":{"doc":"","i":[[5,"blueprint_dir","config_utils","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"create_dirs","","",null,[[],[["error",3],["result",4]]]],[5,"modules_dir","","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"particles_dir","","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"services_dir","","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"to_abs_path","","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"to_peer_id","","",null,[[["keypair",3]],["peerid",3]]],[5,"workdir","","",null,[[["pathbuf",3]],["pathbuf",3]]]],"p":[]},\
"control_macro":{"doc":"","i":[[14,"ok_get","control_macro","Takes option as an argument, unwraps if `Some`, exit…",null,null],[14,"get_return","","Retrieves value from `Some`, returns on `None`",null,null]],"p":[]},\
"ctrlc_adapter":{"doc":"","i":[[5,"block_until_ctrlc","ctrlc_adapter","",null,[[]]]],"p":[]},\
"fluence_client":{"doc":"","i":[[3,"Client","fluence_client","",null,null],[12,"key_pair","","",0,null],[12,"peer_id","","",0,null],[4,"Transport","","",null,null],[13,"Memory","","",1,null],[13,"Network","","",1,null],[4,"ClientCommand","","Describes commands sent from client to relay node; also…",null,null],[13,"Particle","","",2,null],[12,"particle","fluence_client::ClientCommand","",3,null],[4,"ClientEvent","fluence_client","",null,null],[13,"Particle","","",4,null],[12,"particle","fluence_client::ClientEvent","",5,null],[12,"sender","","",5,null],[13,"NewConnection","fluence_client","",4,null],[12,"peer_id","fluence_client::ClientEvent","",6,null],[12,"multiaddr","","",6,null],[11,"is_network","fluence_client","",1,[[]]],[11,"from_maddr","","",1,[[["multiaddr",3]]]],[11,"send","","",0,[[["particle",3],["peerid",3]]]],[11,"receive_one","","",0,[[]]],[11,"stop","","",0,[[]]],[11,"sign","","",0,[[],["vec",3]]],[11,"connect","","",0,[[["multiaddr",3]]]],[11,"connect_with","","",0,[[["multiaddr",3],["transport",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"into","","",2,[[],["particle",3]]],[11,"clone","","",1,[[],["transport",4]]],[11,"clone","","",2,[[],["clientcommand",4]]],[11,"clone","","",4,[[],["clientevent",4]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]]],"p":[[3,"Client"],[4,"Transport"],[4,"ClientCommand"],[13,"Particle"],[4,"ClientEvent"],[13,"Particle"],[13,"NewConnection"]]},\
"fluence_libp2p":{"doc":"","i":[[3,"PeerId","fluence_libp2p","Identifier of a peer of the network.",null,null],[3,"RandomPeerId","","",null,null],[5,"remote_multiaddr","","Retrieves multiaddr of the remote peer",null,[[["connectedpoint",4]],["multiaddr",3]]],[5,"build_memory_transport","","",null,[[["keypair",4]]]],[5,"build_transport","","Creates transport that is common for all connections.",null,[[["keypair",4],["duration",3]]]],[11,"random","","Generates PeerId from random Ed25519 key",0,[[],["peerid",3]]],[0,"types","","",null,null],[6,"Inlet","fluence_libp2p::types","An input port of actor (aka Akka Inlet). Could be used to…",null,null],[6,"Outlet","","An output port of actor (aka Akka Outlet). Could be used…",null,null],[6,"OneshotInlet","","An oneshot input port of actor (aka Akka Inlet). Could be…",null,null],[6,"OneshotOutlet","","An oneshot output port of actor (aka Akka Outlet). Could…",null,null],[0,"peerid_serializer","fluence_libp2p","",null,null],[5,"serialize","fluence_libp2p::peerid_serializer","",null,[[["peerid",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["peerid",3]]]],[0,"multihash_serializer","fluence_libp2p","",null,null],[5,"serialize","fluence_libp2p::multihash_serializer","",null,[[["multihash",6]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["multihash",6]]]],[0,"provider_serializer","fluence_libp2p","",null,null],[5,"serialize","fluence_libp2p::provider_serializer","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[14,"event_polling","fluence_libp2p","Intended to simplify simple polling functions that just…",null,null],[14,"generate_swarm_event_type","","Generates a type of events produced by Swarm by its name",null,null],[14,"poll_loop","","",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"protocol_name","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"cmp","","",1,[[["peerid",3]],["ordering",4]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",1,[[["peerid",3]]]],[11,"clone","","",1,[[],["peerid",3]]],[11,"hash","","",1,[[]]],[11,"peer_id","","",1,[[],["peerid",3]]],[11,"as_ref","","",1,[[]]],[11,"from_str","","",1,[[],[["result",4],["peerid",3]]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[["multihashgeneric",3],["code",4]],[["result",4],["peerid",3]]]],[11,"try_from","","",1,[[["vec",3]],[["result",4],["peerid",3]]]],[11,"from","","",1,[[["publickey",4]],["peerid",3]]],[11,"partial_cmp","","",1,[[["peerid",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_public_key","","Builds a `PeerId` from a public key.",1,[[["publickey",4]],["peerid",3]]],[11,"from_bytes","","Checks whether `data` is a valid `PeerId`. If so, returns…",1,[[["vec",3]],[["vec",3],["result",4],["peerid",3]]]],[11,"from_multihash","","Turns a `Multihash` into a `PeerId`. If the multihash…",1,[[["multihashgeneric",3],["code",4]],[["result",4],["multihashgeneric",3],["peerid",3]]]],[11,"random","","Generates a random peer ID from a cryptographically secure…",1,[[],["peerid",3]]],[11,"into_bytes","","Returns a raw bytes representation of this `PeerId`.",1,[[],["vec",3]]],[11,"as_bytes","","Returns a raw bytes representation of this `PeerId`.",1,[[]]],[11,"to_base58","","Returns a base-58 encoded string of this `PeerId`.",1,[[],["string",3]]],[11,"is_public_key","","Checks whether the public key passed as parameter matches…",1,[[["publickey",4]],["option",4]]],[11,"as_public_key","","Returns public key if it was inlined in this `PeerId`.",1,[[],[["publickey",4],["option",4]]]],[11,"is_inlining","","Returns true if this peer id is inlining (usually means it…",1,[[]]]],"p":[[3,"RandomPeerId"],[3,"PeerId"]]},\
"host_closure":{"doc":"","i":[[3,"Args","host_closure","Arguments passed by VM to host on call_service",null,null],[12,"service_id","","",0,null],[12,"fname","","",0,null],[12,"args","","",0,null],[4,"ArgsError","","",null,null],[13,"MissingField","","",1,null],[13,"SerdeJson","","",1,null],[12,"field","host_closure::ArgsError","",2,null],[12,"err","","",2,null],[13,"InvalidFormat","host_closure","",1,null],[12,"field","host_closure::ArgsError","",3,null],[12,"err","","",3,null],[5,"closure","host_closure","Converts Fn into Closure, converting error into Option",null,[[],["closure",6]]],[5,"closure_opt","","Converts Fn into Closure, converting error into Option",null,[[],["closure",6]]],[11,"parse","","Construct Args from `Vec<IValue>`",0,[[["vec",3],["ivalue",4]],[["args",3],["result",4],["argserror",4]]]],[11,"next","","Retrieves next json value from iterator, parse it to T",0,[[],[["result",4],["deserialize",8],["argserror",4]]]],[11,"maybe_next","","Retrieves a json value from iterator if it\'s not empty,…",0,[[],[["result",4],["option",4],["argserror",4]]]],[6,"Closure","","",null,null],[6,"ClosureDescriptor","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"Args"],[4,"ArgsError"],[13,"SerdeJson"],[13,"InvalidFormat"]]},\
"ivalue_utils":{"doc":"","i":[[4,"IType","ivalue_utils","Represents the types supported by WIT.",null,null],[13,"S8","","A 8-bits signed integer.",0,null],[13,"S16","","A 16-bits signed integer.",0,null],[13,"S32","","A 32-bits signed integer.",0,null],[13,"S64","","A 64-bits signed integer.",0,null],[13,"U8","","A 8-bits unsigned integer.",0,null],[13,"U16","","A 16-bits unsigned integer.",0,null],[13,"U32","","A 32-bits unsigned integer.",0,null],[13,"U64","","A 64-bits unsigned integer.",0,null],[13,"F32","","A 32-bits float.",0,null],[13,"F64","","A 64-bits float.",0,null],[13,"String","","A string.",0,null],[13,"Array","","An array of values of the same type.",0,null],[13,"Anyref","","An `any` reference.",0,null],[13,"I32","","A 32-bits integer (as defined in WebAssembly core).",0,null],[13,"I64","","A 64-bits integer (as defined in WebAssembly core).",0,null],[13,"Record","","A record contains record index from interfaces AST.",0,null],[4,"IValue","","A WIT value.",null,null],[13,"S8","","A 8-bits signed integer.",1,null],[13,"S16","","A 16-bits signed integer.",1,null],[13,"S32","","A 32-bits signed integer.",1,null],[13,"S64","","A 64-bits signed integer.",1,null],[13,"U8","","A 8-bits unsigned integer.",1,null],[13,"U16","","A 16-bits unsigned integer.",1,null],[13,"U32","","A 32-bits unsigned integer.",1,null],[13,"U64","","A 64-bits unsigned integer.",1,null],[13,"F32","","A 32-bits float.",1,null],[13,"F64","","A 64-bits float.",1,null],[13,"String","","A string.",1,null],[13,"Array","","A byte array.",1,null],[13,"I32","","A 32-bits integer (as defined in WebAssembly core).",1,null],[13,"I64","","A 64-bits integer (as defiend in WebAssembly core).",1,null],[13,"Record","","A record.",1,null],[0,"vec1","","`Vec1<T>` represents a non-empty `Vec<T>`.",null,null],[3,"Vec1","ivalue_utils::vec1","`Vec1<T>` represents a non-empty `Vec<T>`. It derefs to…",null,null],[3,"EmptyVec","","Represents the only error that can be emitted by `Vec1`,…",null,null],[14,"vec1","ivalue_utils","This macro creates a `Vec1` by checking at compile-time…",null,null],[5,"as_str","","",null,[[["ivalue",4]],["option",4]]],[5,"into_string","","",null,[[["ivalue",4]],[["option",4],["string",3]]]],[5,"into_record_opt","","Converts result of call_service into `IValue::Record`",null,[[["result",4],["jvalue",4],["option",4]],[["option",4],["ivalue",4]]]],[5,"into_record","","Converts result of call_service into `IValue::Record`",null,[[["jvalue",4],["result",4]],[["option",4],["ivalue",4]]]],[5,"ok","","Converts successful result of call_service into…",null,[[["jvalue",4]],[["option",4],["ivalue",4]]]],[5,"ivalue_ok","","Converts successful result of app service execution into…",null,[[["ivalue",4]],[["option",4],["ivalue",4]]]],[5,"error","","Converts erroneous result of call_service into…",null,[[["jvalue",4]],[["option",4],["ivalue",4]]]],[5,"unit","","Converts empty result of call_service into `IValue::Record`",null,[[],[["option",4],["ivalue",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","ivalue_utils::vec1","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"default","","",2,[[],["vec1",3]]],[11,"default","ivalue_utils","",1,[[],["interfacevalue",4]]],[11,"deref","ivalue_utils::vec1","",2,[[]]],[11,"fmt","ivalue_utils","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ivalue_utils::vec1","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",2,[[["vec1",3]]]],[11,"ne","","",2,[[["vec1",3]]]],[11,"eq","ivalue_utils","",0,[[["interfacetype",4]]]],[11,"ne","","",0,[[["interfacetype",4]]]],[11,"eq","","",1,[[["interfacevalue",4]]]],[11,"ne","","",1,[[["interfacevalue",4]]]],[11,"to_bytes","","",0,[[],[["result",4],["error",3]]]],[11,"deserialize","ivalue_utils::vec1","",2,[[],[["result",4],["vec1",3]]]],[11,"deserialize","ivalue_utils","",0,[[],[["result",4],["interfacetype",4]]]],[11,"parse","","",0,[[["parser",3]],[["result",4],["interfacetype",4],["error",3]]]],[11,"clone","ivalue_utils::vec1","",2,[[],["vec1",3]]],[11,"clone","ivalue_utils","",0,[[],["interfacetype",4]]],[11,"clone","","",1,[[],["interfacevalue",4]]],[11,"hash","ivalue_utils::vec1","",2,[[]]],[11,"hash","ivalue_utils","",0,[[]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[["string",3]],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","ivalue_utils::vec1","",2,[[],["result",4]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"new","","Creates a new non-empty vector, based on an inner…",2,[[["vec",3]],[["result",4],["vec1",3],["emptyvec",3]]]],[11,"into_vec","","Converts this Vec1 into Vec",2,[[],["vec",3]]]],"p":[[4,"IType"],[4,"IValue"],[3,"Vec1"],[3,"EmptyVec"]]},\
"json_utils":{"doc":"","i":[[5,"into_string","json_utils","",null,[[["jvalue",4]],[["option",4],["string",3]]]],[5,"into_array","","",null,[[["jvalue",4]],[["vec",3],["option",4]]]],[5,"err_as_value","","Converts an error into IValue::String",null,[[["debug",8]],["jvalue",4]]]],"p":[]},\
"particle_actors":{"doc":"","i":[[0,"vec1","particle_actors","",null,null],[3,"Vec1","particle_actors::vec1","`Vec1<T>` represents a non-empty `Vec<T>`. It derefs to…",null,null],[3,"HostImportDescriptor","particle_actors","",null,null],[12,"host_exported_func","","This closure will be invoked for corresponding import.",0,null],[12,"argument_types","","Type of the closure arguments.",0,null],[12,"output_type","","Types of output of the closure.",0,null],[12,"error_handler","","If Some, this closure is called with error when errors is…",0,null],[3,"VmPoolConfig","","",null,null],[12,"current_peer_id","","",1,null],[12,"workdir","","Working dir for steppers",1,null],[12,"modules_dir","","Dir to store .wasm modules and their configs",1,null],[12,"services_dir","","Dir to persist info about running steppers",1,null],[12,"particles_dir","","Dir for stepper to persist particle data to merge it",1,null],[12,"pool_size","","Number of VMs to create",1,null],[3,"Plumber","","",null,null],[4,"PlumberEvent","","",null,null],[13,"Forward","","",2,null],[12,"target","particle_actors::PlumberEvent","",3,null],[12,"particle","","",3,null],[11,"new","particle_actors","",1,[[["peerid",3],["pathbuf",3]],[["result",4],["error",3]]]],[11,"create_dirs","","",1,[[],[["error",3],["result",4]]]],[11,"new","","",4,[[["vmpoolconfig",3],["closuredescriptor",6]]]],[11,"ingest","","Receives and ingests incoming particle: creates a new…",4,[[["particle",3]]]],[11,"poll","","",4,[[["context",3]],[["poll",4],["plumberevent",4]]]],[11,"from","particle_actors::vec1","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"from","particle_actors","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"vzip","","",4,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"default","particle_actors::vec1","",5,[[],["vec1",3]]],[11,"deref","","",5,[[]]],[11,"fmt","","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",5,[[["vec1",3]]]],[11,"ne","","",5,[[["vec1",3]]]],[11,"deserialize","","",5,[[],[["vec1",3],["result",4]]]],[11,"clone","","",5,[[],["vec1",3]]],[11,"hash","","",5,[[]]],[11,"serialize","","",5,[[],["result",4]]],[11,"clone","particle_actors","",1,[[],["vmpoolconfig",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"new","particle_actors::vec1","Creates a new non-empty vector, based on an inner…",5,[[["vec",3]],[["emptyvec",3],["vec1",3],["result",4]]]],[11,"into_vec","","Converts this Vec1 into Vec",5,[[],["vec",3]]]],"p":[[3,"HostImportDescriptor"],[3,"VmPoolConfig"],[4,"PlumberEvent"],[13,"Forward"],[3,"Plumber"],[3,"Vec1"]]},\
"particle_behaviour":{"doc":"","i":[[3,"ParticleBehaviour","particle_behaviour","",null,null],[3,"ParticleConfig","","",null,null],[12,"protocol_config","","",0,null],[12,"current_peer_id","","",0,null],[12,"services_base_dir","","",0,null],[12,"services_envs","","",0,null],[12,"stepper_base_dir","","",0,null],[12,"key_pair","","",0,null],[12,"stepper_pool_size","","",0,null],[11,"new","","",1,[[["particleconfig",3],["trustgraph",3],["option",4],["registry",3]],["result",6]]],[11,"add_kad_node","","",1,[[["multiaddr",3],["vec",3],["peerid",3],["publickey",3]]]],[11,"bootstrap","","",1,[[]]],[11,"new","","",0,[[["protocolconfig",3],["peerid",3],["hashmap",3],["keypair",3],["vec",3],["pathbuf",3]]]],[11,"actor_config","","",0,[[],[["vmpoolconfig",3],["result",6]]]],[11,"services_config","","",0,[[],[["result",6],["servicesconfig",3]]]],[11,"modules_dir","","Creates and returns path for app service modules directory",0,[[],[["result",6],["pathbuf",3]]]],[11,"blueprint_dir","","Creates and returns path for app service blueprint directory",0,[[],[["result",6],["pathbuf",3]]]],[11,"dht_config","","",0,[[],["dhtconfig",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"new_handler","","",1,[[]]],[11,"addresses_of_peer","","",1,[[["peerid",3]],[["multiaddr",3],["vec",3]]]],[11,"inject_connected","","",1,[[["peerid",3]]]],[11,"inject_disconnected","","",1,[[["peerid",3]]]],[11,"inject_event","","",1,[[["connectionid",3],["peerid",3]]]],[11,"poll","","",1,[[["context",3]],[["poll",4],["networkbehaviouraction",4]]]],[11,"inject_addr_reach_failure","","",1,[[["multiaddr",3],["peerid",3],["option",4],["error",8]]]],[11,"inject_dial_failure","","",1,[[["peerid",3]]]],[11,"inject_new_listen_addr","","",1,[[["multiaddr",3]]]],[11,"inject_expired_listen_addr","","",1,[[["multiaddr",3]]]],[11,"inject_new_external_addr","","",1,[[["multiaddr",3]]]],[11,"inject_listener_error","","",1,[[["error",8],["listenerid",3]]]],[11,"inject_listener_closed","","",1,[[["error",3],["result",4],["listenerid",3]]]],[11,"inject_connection_established","","",1,[[["connectedpoint",4],["peerid",3],["connectionid",3]]]],[11,"inject_connection_closed","","",1,[[["connectedpoint",4],["peerid",3],["connectionid",3]]]],[11,"inject_address_change","","",1,[[["connectedpoint",4],["peerid",3],["connectionid",3]]]],[11,"inject_event","","",1,[[]]],[11,"inject_event","","",1,[[["dhtevent",4]]]],[11,"inject_event","","",1,[[["plumberevent",4]]]],[11,"inject_event","","",1,[[["builtincommand",4]]]]],"p":[[3,"ParticleConfig"],[3,"ParticleBehaviour"]]},\
"particle_closures":{"doc":"","i":[[3,"BuiltinServicesApi","particle_closures","",null,null],[3,"HostClosures","","",null,null],[12,"create_service","","",0,null],[12,"call_service","","",0,null],[12,"builtin","","",0,null],[12,"add_module","","",0,null],[12,"add_blueprint","","",0,null],[12,"get_modules","","",0,null],[12,"get_blueprints","","",0,null],[12,"add_provider","","",0,null],[12,"get_providers","","",0,null],[3,"Mailbox","","",null,null],[4,"BuiltinCommand","","",null,null],[13,"DHTResolve","","",1,null],[13,"DHTNeighborhood","","",1,null],[11,"new","","",2,[[["unboundedsender",3],["command",3]]]],[11,"is_builtin","","",2,[[]]],[11,"router","","",2,[[],["closure",6]]],[11,"descriptor","","",0,[[],[["fn",8],["arc",3]]]],[11,"new","","",3,[[]]],[11,"get_api","","",3,[[],["builtinservicesapi",3]]],[11,"resolve_complete","","Called when `dht.get_record` for `key` is completed",3,[[["result",4],["key",3],["hashset",3],["resolveerrorkind",4]]]],[11,"got_neighborhood","","Called when `dht.get_closest_peers` is completed",3,[[["result",4],["hashset",3],["vec",3],["neighborhooderror",4]]]],[11,"poll","","",3,[[["context",3]],[["poll",4],["builtincommand",4]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"vzip","","",3,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"clone","","",2,[[],["builtinservicesapi",3]]],[11,"clone","","",0,[[],["hostclosures",3]]],[11,"clone","","",1,[[],["builtincommand",4]]],[11,"default","","",3,[[]]],[11,"eq","","",1,[[["builtincommand",4]]]],[11,"ne","","",1,[[["builtincommand",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]]],"p":[[3,"HostClosures"],[4,"BuiltinCommand"],[3,"BuiltinServicesApi"],[3,"Mailbox"]]},\
"particle_dht":{"doc":"","i":[[3,"DHTConfig","particle_dht","",null,null],[12,"peer_id","","",0,null],[12,"keypair","","",0,null],[3,"ParticleDHT","","",null,null],[3,"ResolveError","","",null,null],[12,"key","","",1,null],[12,"kind","","",1,null],[4,"DHTEvent","","",null,null],[13,"DialPeer","","",2,null],[12,"peer_id","particle_dht::DHTEvent","",3,null],[12,"condition","","",3,null],[13,"Published","particle_dht","",2,null],[13,"PublishFailed","","",2,null],[13,"Forward","","",2,null],[12,"target","particle_dht::DHTEvent","",4,null],[12,"particle","","",4,null],[13,"Resolved","particle_dht","",2,null],[12,"key","particle_dht::DHTEvent","",5,null],[12,"value","","",5,null],[13,"ResolveFailed","particle_dht","",2,null],[12,"err","particle_dht::DHTEvent","",6,null],[13,"Neighborhood","particle_dht","",2,null],[12,"key","particle_dht::DHTEvent","",7,null],[12,"value","","",7,null],[4,"NeighborhoodError","particle_dht","",null,null],[13,"Timeout","","",8,null],[4,"ResolveErrorKind","","",null,null],[13,"Timeout","","",9,null],[13,"QuorumFailed","","",9,null],[13,"NotFound","","",9,null],[11,"connected","","",10,[[["peerid",3]]]],[11,"disconnected","","",10,[[["peerid",3]]]],[11,"new","","",10,[[["option",4],["dhtconfig",3],["registry",3],["trustgraph",3]]]],[11,"poll","","",10,[[["context",3]],[["poll",4],["dhtevent",4]]]],[11,"add_kad_node","","",10,[[["multiaddr",3],["vec",3],["peerid",3],["publickey",3]]]],[11,"bootstrap","","Run kademlia bootstrap, to advertise ourselves in Kademlia",10,[[]]],[11,"publish_client","","",10,[[["peerid",3]]]],[11,"resolve","","",10,[[["key",3]]]],[11,"get_neighborhood","","",10,[[["vec",3]]]],[11,"send_to","","",10,[[["particle",3],["peerid",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"clone","","",1,[[],["resolveerror",3]]],[11,"clone","","",9,[[],["resolveerrorkind",4]]],[11,"clone","","",8,[[],["neighborhooderror",4]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"inject_event","","",10,[[["kademliaevent",4]]]]],"p":[[3,"DHTConfig"],[3,"ResolveError"],[4,"DHTEvent"],[13,"DialPeer"],[13,"Forward"],[13,"Resolved"],[13,"ResolveFailed"],[13,"Neighborhood"],[4,"NeighborhoodError"],[4,"ResolveErrorKind"],[3,"ParticleDHT"]]},\
"particle_modules":{"doc":"","i":[[3,"Blueprint","particle_modules","",null,null],[12,"name","","",0,null],[12,"id","","",0,null],[12,"dependencies","","",0,null],[4,"ModuleError","","",null,null],[13,"AddModule","","",1,null],[12,"path","particle_modules::ModuleError","",2,null],[12,"err","","",2,null],[13,"SerializeConfig","particle_modules","",1,null],[12,"err","particle_modules::ModuleError","",3,null],[13,"WriteConfig","particle_modules","",1,null],[12,"path","particle_modules::ModuleError","",4,null],[12,"err","","",4,null],[13,"NoSuchBlueprint","particle_modules","",1,null],[12,"path","particle_modules::ModuleError","",5,null],[12,"err","","",5,null],[13,"IncorrectBlueprint","particle_modules","",1,null],[12,"err","particle_modules::ModuleError","",6,null],[13,"NoModuleConfig","particle_modules","",1,null],[12,"path","particle_modules::ModuleError","",7,null],[12,"err","","",7,null],[13,"IncorrectModuleConfig","particle_modules","",1,null],[12,"err","particle_modules::ModuleError","",8,null],[13,"ModuleConvertError","particle_modules","",1,null],[12,"err","particle_modules::ModuleError","",9,null],[13,"WriteBlueprint","particle_modules","",1,null],[12,"path","particle_modules::ModuleError","",10,null],[12,"err","","",10,null],[5,"is_service","particle_modules","",null,[[["pathbuf",3]]]],[5,"service_file_name","","",null,[[],["string",3]]],[5,"list_files","","List files in directory",null,[[["pathbuf",3]],["option",4]]],[5,"load_blueprint","","Load blueprint from disk",null,[[["pathbuf",3]],[["blueprint",3],["moduleerror",4],["result",4]]]],[5,"load_module_config","","Load FaaSModuleConfig from disk, for a given module name",null,[[["pathbuf",3]],[["result",4],["moduleerror",4]]]],[5,"add_blueprint","","Saves new blueprint to disk",null,[[["pathbuf",3]],["closure",6]]],[5,"add_module","","Adds a module to the filesystem, overwriting existing…",null,[[["pathbuf",3]],["closure",6]]],[5,"get_blueprints","","Get available blueprints",null,[[["pathbuf",3]],["closure",6]]],[5,"get_modules","","Get available modules (intersection of modules from config…",null,[[["pathbuf",3]],["closure",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"clone","","",0,[[],["blueprint",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"Blueprint"],[4,"ModuleError"],[13,"AddModule"],[13,"SerializeConfig"],[13,"WriteConfig"],[13,"NoSuchBlueprint"],[13,"IncorrectBlueprint"],[13,"NoModuleConfig"],[13,"IncorrectModuleConfig"],[13,"ModuleConvertError"],[13,"WriteBlueprint"]]},\
"particle_protocol":{"doc":"","i":[[3,"ProtocolConfig","particle_protocol","",null,null],[12,"upgrade_timeout","","Timeout for applying the given upgrade on a substream",0,null],[12,"keep_alive_timeout","","Keep-alive timeout for idle connections.",0,null],[12,"outbound_substream_timeout","","Timeout for outbound substream upgrades.",0,null],[3,"Particle","","",null,null],[12,"id","","",1,null],[12,"init_peer_id","","",1,null],[12,"timestamp","","",1,null],[12,"ttl","","",1,null],[12,"script","","",1,null],[12,"signature","","",1,null],[12,"data","","Must be an array",1,null],[4,"ProtocolMessage","","",null,null],[13,"Particle","","",2,null],[13,"UpgradeError","","",2,null],[13,"Upgrade","","",2,null],[11,"new","","",0,[[["duration",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"protocol_info","","",0,[[]]],[11,"upgrade_inbound","","",0,[[["substreamref",3],["negotiated",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"protocol_info","","",2,[[]]],[11,"upgrade_outbound","","",2,[[["substreamref",3],["negotiated",3]]]],[11,"vzip","","",2,[[]]],[11,"into","","",0,[[],[["protocolconfig",3],["oneshothandler",3]]]],[11,"clone","","",2,[[],["protocolmessage",4]]],[11,"clone","","",0,[[],["protocolconfig",3]]],[11,"clone","","",1,[[],["particle",3]]],[11,"default","","",2,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"eq","","",2,[[["protocolmessage",4]]]],[11,"ne","","",2,[[["protocolmessage",4]]]],[11,"eq","","",1,[[["particle",3]]]],[11,"ne","","",1,[[["particle",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"upgrade_inbound","","",0,[[]]],[11,"upgrade_outbound","","",2,[[]]],[11,"protocol_info","","",0,[[]]],[11,"protocol_info","","",2,[[]]]],"p":[[3,"ProtocolConfig"],[3,"Particle"],[4,"ProtocolMessage"]]},\
"particle_providers":{"doc":"This crate describes how providers are stored in memory","i":[[3,"Provider","particle_providers","A representation of a service provider",null,null],[12,"peer","","Peer id of the node that acts as a provider",0,null],[12,"service_id","","Optional service_id If defined, an app service is…",0,null],[3,"ProviderRepository","","Thread-safe storage of providers",null,null],[4,"ProviderError","","Errors that happen during `ProviderRepository` reading or…",null,null],[13,"Poisoned","","The whole repository was poisoned by a panic",1,null],[13,"KeyPoisoned","","Only a single key was poisoned by a panic",1,null],[11,"new","","Constructor",2,[[["peerid",3]]]],[11,"get_providers","","Creates a closure that takes `key` as a parameter, and…",2,[[],["closure",6]]],[11,"add_provider","","Creates a closure that takes a `Provider` instance as an…",2,[[],["closure",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"eq","","",0,[[["provider",3]]]],[11,"ne","","",0,[[["provider",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]]],"p":[[3,"Provider"],[4,"ProviderError"],[3,"ProviderRepository"]]},\
"particle_server":{"doc":"","i":[[3,"ServerBehaviour","particle_server","Coordinates protocols, so they can cooperate",null,null],[3,"BootstrapConfig","","",null,null],[12,"reconnect_delay","","",0,null],[12,"bootstrap_delay","","",0,null],[12,"bootstrap_max_delay","","",0,null],[3,"Server","","",null,null],[11,"new","","",1,[[["serverconfig",3],["keypair",3]],[["box",3],["result",6]]]],[11,"start","","Starts node service",1,[[["box",3]],["oneshotoutlet",6]]],[11,"start_metrics_endpoint","","",1,[[["registry",3],["socketaddr",4]],[["result",6],["boxfuture",6]]]],[11,"new","","",2,[[["behaviourconfig",3]],["result",6]]],[11,"dial_bootstrap_nodes","","Dials bootstrap nodes",2,[[]]],[11,"bootstrap","","",2,[[]]],[0,"config","","",null,null],[3,"AppServicesConfig","particle_server::config","",null,null],[12,"blueprint_dir","","Path of the blueprint directory containing blueprints and…",3,null],[12,"service_envs","","Opaque environment variables to be passed on each service…",3,null],[12,"workdir","","Working dir for services",3,null],[12,"modules_dir","","Dir to store .wasm modules and their configs",3,null],[12,"services_dir","","Dir to persist info about running services",3,null],[3,"BehaviourConfig","","",null,null],[12,"key_pair","","",4,null],[12,"local_peer_id","","",4,null],[12,"listening_addresses","","",4,null],[12,"trust_graph","","",4,null],[12,"bootstrap_nodes","","",4,null],[12,"bootstrap","","",4,null],[12,"registry","","",4,null],[12,"services_base_dir","","",4,null],[12,"services_envs","","",4,null],[12,"stepper_base_dir","","",4,null],[12,"protocol_config","","",4,null],[12,"stepper_pool_size","","",4,null],[3,"FluenceConfig","","",null,null],[12,"server","","",5,null],[12,"certificate_dir","","Directory, where all certificates are stored.",5,null],[12,"root_key_pair","","",5,null],[3,"ServerConfig","","",null,null],[12,"tcp_port","","For TCP connections",6,null],[12,"listen_ip","","Local ip address to listen on",6,null],[12,"socket_timeout","","Socket timeout for main transport",6,null],[12,"bootstrap_nodes","","Bootstrap nodes to join to the Fluence network",6,null],[12,"websocket_port","","For ws connections",6,null],[12,"external_address","","External address to advertise via identify protocol",6,null],[12,"prometheus_port","","Prometheus port",6,null],[12,"bootstrap_config","","",6,null],[12,"root_weights","","",6,null],[12,"services_base_dir","","Base directory for resources needed by application services",6,null],[12,"services_envs","","",6,null],[12,"stepper_base_dir","","Base directory for resources needed by application services",6,null],[12,"protocol_config","","",6,null],[12,"stepper_pool_size","","Number of stepper VMs to create. By default,…",6,null],[5,"create_args","","",null,[[],[["vec",3],["arg",3]]]],[5,"load_config","","",null,[[["argmatches",3]],[["result",6],["fluenceconfig",3]]]],[11,"new","","",3,[[["string",3],["vec",3]],[["result",4],["error",3]]]],[11,"create_dirs","","",3,[[],[["error",3],["result",4]]]],[11,"new","","",4,[[["option",4],["keypair",3],["registry",3],["trustgraph",3],["serverconfig",3]]]],[11,"external_addresses","","",6,[[],[["multiaddr",3],["vec",3]]]],[11,"root_weights","","",6,[[],["vec",3]]],[0,"certificates","","",null,null],[5,"init","particle_server::config::certificates","Loads all certificates from a disk. Creates a root…",null,[[["keypair",3]],[["result",4],["vec",3],["error",3]]]],[5,"load_certificates","","Reads all files in `cert_dir` as certificates. Throw an…",null,[[],[["result",4],["vec",3],["error",3]]]],[5,"store_root_certificate","","",null,[[["duration",3],["keypair",3]],[["result",4],["certificate",3],["error",3]]]],[11,"zero","particle_server","Creates config with all values to zero, so no delays.…",0,[[],["bootstrapconfig",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","particle_server::config","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"clone","","",3,[[],["appservicesconfig",3]]],[11,"clone","","",6,[[],["serverconfig",3]]],[11,"clone","particle_server","",0,[[],["bootstrapconfig",3]]],[11,"default","","",0,[[]]],[11,"fmt","particle_server::config","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","particle_server","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","particle_server::config","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","particle_server","",0,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"new_handler","","",2,[[]]],[11,"addresses_of_peer","","",2,[[["peerid",3]],[["multiaddr",3],["vec",3]]]],[11,"inject_connected","","",2,[[["peerid",3]]]],[11,"inject_disconnected","","",2,[[["peerid",3]]]],[11,"inject_connection_established","","",2,[[["connectionid",3],["connectedpoint",4],["peerid",3]]]],[11,"inject_address_change","","",2,[[["connectionid",3],["peerid",3],["connectedpoint",4]]]],[11,"inject_connection_closed","","",2,[[["connectionid",3],["connectedpoint",4],["peerid",3]]]],[11,"inject_addr_reach_failure","","",2,[[["multiaddr",3],["peerid",3],["option",4],["error",8]]]],[11,"inject_dial_failure","","",2,[[["peerid",3]]]],[11,"inject_new_listen_addr","","",2,[[["multiaddr",3]]]],[11,"inject_expired_listen_addr","","",2,[[["multiaddr",3]]]],[11,"inject_new_external_addr","","",2,[[["multiaddr",3]]]],[11,"inject_listener_error","","",2,[[["error",8],["listenerid",3]]]],[11,"inject_listener_closed","","",2,[[["error",3],["result",4],["listenerid",3]]]],[11,"inject_event","","",2,[[["connectionid",3],["peerid",3]]]],[11,"poll","","",2,[[["context",3]],[["networkbehaviouraction",4],["poll",4]]]],[11,"inject_event","","",2,[[["identifyevent",4]]]],[11,"inject_event","","",2,[[]]],[11,"inject_event","","",2,[[["pingevent",3]]]]],"p":[[3,"BootstrapConfig"],[3,"Server"],[3,"ServerBehaviour"],[3,"AppServicesConfig"],[3,"BehaviourConfig"],[3,"FluenceConfig"],[3,"ServerConfig"]]},\
"particle_services":{"doc":"","i":[[4,"IType","particle_services","Represents the types supported by WIT.",null,null],[13,"S8","","A 8-bits signed integer.",0,null],[13,"S16","","A 16-bits signed integer.",0,null],[13,"S32","","A 32-bits signed integer.",0,null],[13,"S64","","A 64-bits signed integer.",0,null],[13,"U8","","A 8-bits unsigned integer.",0,null],[13,"U16","","A 16-bits unsigned integer.",0,null],[13,"U32","","A 32-bits unsigned integer.",0,null],[13,"U64","","A 64-bits unsigned integer.",0,null],[13,"F32","","A 32-bits float.",0,null],[13,"F64","","A 64-bits float.",0,null],[13,"String","","A string.",0,null],[13,"Array","","An array of values of the same type.",0,null],[13,"Anyref","","An `any` reference.",0,null],[13,"I32","","A 32-bits integer (as defined in WebAssembly core).",0,null],[13,"I64","","A 64-bits integer (as defined in WebAssembly core).",0,null],[13,"Record","","A record contains record index from interfaces AST.",0,null],[4,"IValue","","A WIT value.",null,null],[13,"S8","","A 8-bits signed integer.",1,null],[13,"S16","","A 16-bits signed integer.",1,null],[13,"S32","","A 32-bits signed integer.",1,null],[13,"S64","","A 64-bits signed integer.",1,null],[13,"U8","","A 8-bits unsigned integer.",1,null],[13,"U16","","A 16-bits unsigned integer.",1,null],[13,"U32","","A 32-bits unsigned integer.",1,null],[13,"U64","","A 64-bits unsigned integer.",1,null],[13,"F32","","A 32-bits float.",1,null],[13,"F64","","A 64-bits float.",1,null],[13,"String","","A string.",1,null],[13,"Array","","A byte array.",1,null],[13,"I32","","A 32-bits integer (as defined in WebAssembly core).",1,null],[13,"I64","","A 64-bits integer (as defiend in WebAssembly core).",1,null],[13,"Record","","A record.",1,null],[3,"ParticleAppServices","","",null,null],[3,"ServicesConfig","","",null,null],[12,"blueprint_dir","","Path of the blueprint directory containing blueprints and…",2,null],[12,"envs","","Opaque environment variables to be passed on each service…",2,null],[12,"workdir","","Working dir for services",2,null],[12,"modules_dir","","Dir to store .wasm modules and their configs",2,null],[12,"services_dir","","Dir to persist info about running services",2,null],[11,"new","","",3,[[["servicesconfig",3]]]],[11,"create_service","","",3,[[],["closure",6]]],[11,"call_service","","",3,[[],["closure",6]]],[11,"new","","",2,[[["hashmap",3],["vec",3],["pathbuf",3]],[["result",4],["error",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"vzip","","",3,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"default","","",1,[[],["interfacevalue",4]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",0,[[["interfacetype",4]]]],[11,"ne","","",0,[[["interfacetype",4]]]],[11,"eq","","",1,[[["interfacevalue",4]]]],[11,"ne","","",1,[[["interfacevalue",4]]]],[11,"to_bytes","","",0,[[],[["result",4],["error",3]]]],[11,"deserialize","","",0,[[],[["result",4],["interfacetype",4]]]],[11,"parse","","",0,[[["parser",3]],[["interfacetype",4],["error",3],["result",4]]]],[11,"clone","","",0,[[],["interfacetype",4]]],[11,"clone","","",1,[[],["interfacevalue",4]]],[11,"hash","","",0,[[]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[["string",3]],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"from","","",1,[[],["interfacevalue",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"clone","","",2,[[],["servicesconfig",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]]],"p":[[4,"IType"],[4,"IValue"],[3,"ServicesConfig"],[3,"ParticleAppServices"]]},\
"test_utils":{"doc":"","i":[[3,"ConnectedClient","test_utils","",null,null],[12,"client","","",0,null],[12,"node","","",0,null],[12,"node_address","","",0,null],[12,"timeout","","",0,null],[12,"short_timeout","","",0,null],[12,"kad_timeout","","",0,null],[3,"CreatedSwarm","","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[3,"Trust","","",null,null],[12,"root_weights","","",2,null],[12,"certificates","","",2,null],[12,"cur_time","","",2,null],[3,"SwarmConfig","","",null,null],[12,"bootstraps","","",3,null],[12,"listen_on","","",3,null],[12,"trust","","",3,null],[12,"transport","","",3,null],[12,"registry","","",3,null],[12,"tmp_dir","","",3,null],[12,"aquamarine_file_name","","",3,null],[4,"Instruction","","",null,null],[13,"Seq","","",4,null],[13,"Call","","",4,null],[13,"Null","","",4,null],[5,"connect_swarms","","",null,[[]]],[5,"connect_real","","",null,[[]]],[5,"pass_data_func","","",null,[[["jvalue",4],["hashmap",3]],["hostexportedfunc",6]]],[5,"return_data_func","","",null,[[["arc",3],["mutex",6]],["hostexportedfunc",6]]],[5,"make_particle","","",null,[[["jvalue",4],["string",3],["peerid",3],["hashmap",3]],["particle",3]]],[5,"read_args","","",null,[[["particle",3],["peerid",3]],[["vec",3],["jvalue",4]]]],[5,"uuid","","",null,[[],["string",3]]],[5,"get_cert","","",null,[[],["certificate",3]]],[5,"enable_logs","","",null,[[]]],[5,"make_swarms","","",null,[[],[["vec",3],["createdswarm",3]]]],[5,"make_swarms_with_cfg","","",null,[[],[["vec",3],["createdswarm",3]]]],[5,"make_swarms_with","","",null,[[],[["vec",3],["createdswarm",3]]]],[5,"create_swarm","","",null,[[["swarmconfig",3]]]],[5,"create_memory_maddr","","",null,[[],["multiaddr",3]]],[5,"make_tmp_dir","","",null,[[],["pathbuf",3]]],[5,"remove_dir","","",null,[[["pathbuf",3]]]],[5,"aquamarine_fname","","Returns path to test aquamarine.wasm `file_name` allows to…",null,[[["option",4],["string",3]],["pathbuf",3]]],[5,"put_aquamarine","","",null,[[["option",4],["string",3],["pathbuf",3]]]],[5,"test_module","","",null,[[],["vec",3]]],[5,"now","","",null,[[]]],[5,"timeout","","",null,[[["duration",3]]]],[11,"timeout","","",0,[[],["duration",3]]],[11,"short_timeout","","",0,[[],["duration",3]]],[11,"kad_timeout","","",0,[[],["duration",3]]],[11,"connect_to","","",0,[[["multiaddr",3]],["result",6]]],[11,"new","","",0,[[["client",3],["multiaddr",3],["peerid",3]]]],[11,"make_clients","","",0,[[],["result",6]]],[11,"send","","",0,[[["particle",3]]]],[11,"send_particle","","",0,[[["jvalue",4],["hashmap",3]]]],[11,"maybe_receive","","",0,[[],[["particle",3],["option",4]]]],[11,"receive","","",0,[[],["particle",3]]],[11,"receive_args","","",0,[[],[["vec",3],["jvalue",4]]]],[11,"add","","",4,[[["string",3]]]],[11,"into_air","","",4,[[],["string",3]]],[11,"new","","",3,[[["vec",3],["multiaddr",3]]]],[11,"with_trust","","",3,[[["trust",3],["vec",3],["multiaddr",3]]]],[11,"with_aquamarine","","",3,[[["string",3],["into",8]]]],[6,"Result","","Utility functions for tests.",null,null],[7,"TIMEOUT","","In debug, VM startup time is big, account for that",null,null],[7,"SHORT_TIMEOUT","","",null,null],[7,"KAD_TIMEOUT","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"clone","","",2,[[],["trust",3]]],[11,"clone","","",3,[[],["swarmconfig",3]]],[11,"default","","",2,[[],["trust",3]]],[11,"default","","",3,[[]]],[11,"eq","","",4,[[["instruction",4]]]],[11,"ne","","",4,[[["instruction",4]]]],[11,"deref","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"ConnectedClient"],[3,"CreatedSwarm"],[3,"Trust"],[3,"SwarmConfig"],[4,"Instruction"]]},\
"trust_graph":{"doc":"","i":[[3,"Certificate","trust_graph","Chain of trusts started from self-signed root trust.",null,null],[12,"chain","","",0,null],[3,"KeyPair","","An Ed25519 keypair.",null,null],[12,"key_pair","","",1,null],[3,"PublicKeyHashable","","Wrapper to use PublicKey in HashMap",null,null],[3,"Trust","","One element in chain of trust in a certificate. TODO…",null,null],[12,"issued_for","","For whom this certificate is issued",2,null],[12,"expires_at","","Expiration date of a trust.",2,null],[12,"signature","","Signature of a previous trust in a chain. Signature is…",2,null],[12,"issued_at","","Creation time of a trust",2,null],[3,"TrustGraph","","Graph to efficiently calculate weights of certificates and…",null,null],[5,"current_time","","",null,[[],["duration",3]]],[11,"new_unverified","","",0,[[["vec",3],["trust",3]]]],[11,"issue_root","","Creates new certificate with root trust (self-signed…",0,[[["duration",3],["keypair",3],["publickey",3]]]],[11,"issue","","Adds a new trust into chain of trust in certificate.",0,[[["duration",3],["certificate",3],["keypair",3],["publickey",3]],[["string",3],["result",4]]]],[11,"verify","","Verifies that a certificate is valid and you trust to this…",0,[[["duration",3],["certificate",3]],[["string",3],["result",4]]]],[11,"encode","","Convert certificate to byte format 2 format + 4 version +…",0,[[],["vec",3]]],[11,"decode","","",0,[[],[["string",3],["result",4]]]],[0,"certificate_serde","","",null,null],[0,"vec","trust_graph::certificate_serde","",null,null],[5,"serialize","trust_graph::certificate_serde::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[11,"generate","trust_graph","Generate a new Ed25519 keypair.",1,[[]]],[11,"from_bytes","","",1,[[],[["decodingerror",3],["result",4]]]],[11,"encode","","Encode the keypair into a byte array by concatenating the…",1,[[]]],[11,"decode","","Decode a keypair from the format produced by `encode`.",1,[[],[["result",4],["keypair",3],["signatureerror",6]]]],[11,"public_key","","Get the public key of this keypair.",1,[[],["publickey",3]]],[11,"sign","","Sign a message using the private key of this keypair.",1,[[],["vec",3]]],[11,"verify","","Verify the Ed25519 signature on a message using the public…",1,[[["publickey",3]],[["string",3],["result",4]]]],[11,"new","","",2,[[["vec",3],["publickey",3],["duration",3]]]],[11,"create","","",2,[[["duration",3],["keypair",3],["publickey",3]]]],[11,"verify","","Verifies that authorization is cryptographically correct.",2,[[["publickey",3],["trust",3],["duration",3]],[["string",3],["result",4]]]],[11,"encode","","Encode the trust into a byte array",2,[[],["vec",3]]],[11,"decode","","Decode a trust from a byte array as produced by `encode`.",2,[[],[["string",3],["result",4]]]],[11,"convert_from_strings","","",2,[[],[["string",3],["result",4]]]],[11,"new","","",3,[[["vec",3]]]],[11,"add_root_weights","","Insert new root weights",3,[[["vec",3]]]],[11,"get","","Get trust by public key",3,[[["publickey",3]],[["trustnode",3],["option",4]]]],[11,"add","","Certificate is a chain of trusts, add this chain to graph",3,[[["duration",3]],[["string",3],["result",4]]]],[11,"weight","","Get the maximum weight of trust for one public key.",3,[[],["option",4]]],[11,"certificates_weight","","Calculate weight from given certificates Returns None if…",3,[[],["option",4]]],[11,"get_all_certs","","Get all possible certificates where `issued_for` will be…",3,[[],[["certificate",3],["vec",3]]]],[11,"revoke","","Mark public key as revoked.",3,[[["revoke",3]],[["string",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"as_ref","","",4,[[],["publickey",3]]],[11,"from","","",1,[[["libp2pkeypair",3]]]],[11,"from","","",4,[[["publickey",3]]]],[11,"into","","",4,[[],["publickey",3]]],[11,"clone","","",0,[[],["certificate",3]]],[11,"clone","","",1,[[],["keypair",3]]],[11,"clone","","",4,[[],["publickeyhashable",3]]],[11,"clone","","",2,[[],["trust",3]]],[11,"default","","",3,[[],["trustgraph",3]]],[11,"eq","","",0,[[["certificate",3]]]],[11,"ne","","",0,[[["certificate",3]]]],[11,"eq","","",4,[[["publickeyhashable",3]]]],[11,"ne","","",4,[[["publickeyhashable",3]]]],[11,"eq","","",2,[[["trust",3]]]],[11,"ne","","",2,[[["trust",3]]]],[11,"to_string","","",2,[[],["string",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"hash_slice","","",4,[[]]],[11,"from_str","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],[["result",4],["keypair",3]]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"ref_cast","","",4,[[]]],[11,"ref_cast_mut","","",4,[[]]]],"p":[[3,"Certificate"],[3,"KeyPair"],[3,"Trust"],[3,"TrustGraph"],[3,"PublicKeyHashable"]]},\
"waiting_queues":{"doc":"","i":[[3,"WaitingQueues","waiting_queues","",null,null],[4,"Enqueued","","Represents a result of the enqueue_promise operation",null,null],[13,"New","","",0,null],[13,"Existing","","",0,null],[11,"new","","",1,[[]]],[11,"enqueue","","Inserts `item` in the queue associated with `key`",1,[[],["enqueued",4]]],[11,"remove","","Removes queue associated with `key`",1,[[]]],[11,"remove_with","","Removes items on key `k` that satisfy `remove` predicate…",1,[[]]],[11,"count","","Returns number of items on key `k`. Useful for debug.",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"default","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[4,"Enqueued"],[3,"WaitingQueues"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);